package leetcode.solution.array;

/**
 * @Author : Yang
 * @Date :  2023/3/3 22:23
 * @Descriptionï¼š
 */
public class BinarySearch {


    public static void main(String[] args) {
        int arr[] = {287, 91, 368, 272, 50, 211, 355, 204, 516, 131, 888, 54,
                903, 769, 996, 904, 800, 955, 47, 479, 328, 43, 478, 862, 568,
                956, 671, 570, 820, 642, 773, 903, 824, 194, 292, 745, 431, 390,
                602, 454, 757, 692, 46, 679, 347, 136, 670, 402, 785, 857, 732, 436,
                444, 913, 375, 768, 874, 375, 837, 754, 991, 302, 803, 495, 669, 77,
                409, 406, 835, 404, 514, 610, 120, 516, 10, 373, 787, 30, 34, 648, 802,
                908, 182, 121, 728, 768, 20, 745, 703, 438, 536, 25, 804, 277, 329, 353,
                124, 441, 809, 808, 179, 242, 692, 721, 970, 318, 225, 76, 56, 655, 714,
                571, 320, 209, 562, 731, 393, 174, 875, 964, 71, 343, 864, 523, 753, 358,
                746, 92, 819, 840, 391, 101, 398, 507, 550, 654, 85, 617, 57, 465, 743, 582,
                565, 360, 836, 508, 377, 752, 496, 16, 480, 497, 326, 39, 794, 222, 383, 632,
                988, 221, 57, 771, 355, 397, 244, 398, 300, 278, 13, 454, 280, 838, 311, 738,
                214, 141, 420, 936, 689, 497, 487, 597, 939, 719, 499, 998, 189, 691, 460, 333,
                751, 936, 370, 262, 55, 378, 696, 426, 639, 246, 787, 725, 529, 294, 384, 952, 553,
                985, 276, 572, 464, 108, 214, 57, 26, 215, 417, 708, 208, 300, 564, 146, 707, 461,
                913, 161, 731, 507, 34, 827, 245, 766, 844, 475, 622, 745, 744, 540, 491, 547, 929,
                386, 559, 276, 951, 153, 304, 632};

        commonSorts commonSossrts = new commonSorts();
        commonSorts.insertionSort(arr);
        //commonSorts.showArr(arr);
        findExist(arr, 752);
    }

    private static void findExist(int[] arr, int num) {
        int mid = arr.length / 2;
        int left = 0;
        int right = arr.length - 1;

        while (left < right) {
            if (arr[mid] < num) {
                left = mid;
                mid = (left +right) /2;
            }else if(arr[mid] >num){
                right = mid;
                mid = (left +right) /2;
            }else if(arr[mid] == num){
                System.out.printf( "FOUND ");
                System.out.println(mid);
            }


        }

    }
}
